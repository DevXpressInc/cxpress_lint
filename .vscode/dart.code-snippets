{
	"lint": {
		"scope": "dart",
		"prefix": "lint",
		"description": "Create a lint",
		"body": [
			"import 'package:analyzer/error/error.dart';",
			"import 'package:analyzer/error/listener.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"",
			"import '../../utils/constants.dart';"
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends DartLintRule {",
			"  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}() : super(code: _code);",
			"",
			"  static const name = '${TM_FILENAME_BASE}';",
			"",
			"  static const _code = LintCode(",
			"    name: name,",
			"    problemMessage: '${1:The problem message of this lint}',",
			"    correctionMessage: '${2:The correction message of this lint}',",
			"    url: '\\$docUrl#${${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}.name}',"
			"    errorSeverity: ErrorSeverity.INFO,",
			"  );",
			"",
			"  @override",
			"  void run(",
			"    CustomLintResolver resolver,",
			"    ErrorReporter reporter,",
			"    CustomLintContext context,",
			"  ) {",
			"    context.registry.addClassDeclaration((node) {",
			"      ${3://TODO: implement the lint here}",
			"",
			"      reporter.reportErrorForNode(code, node);",
			"    });",
			"  }",
			"",
			"  @override",
			"  List<Fix> getFixes() => [];",
			"}",
			""
		],
	},
	"flutter lint": {
		"scope": "dart",
		"prefix": "flint",
		"description": "Create a flutter lint",
		"body": [
			"import 'package:analyzer/error/error.dart';",
			"import 'package:analyzer/error/listener.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"",
			"import '../../utils/constants.dart';",
			"import '../../utils/pubspec_extensions.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends DartLintRule {",
			"  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}() : super(code: _code);",
			"",
			"  static const name = '${TM_FILENAME_BASE}';",
			"",
			"  static const _code = LintCode(",
			"    name: name,",
			"    problemMessage: '${1:The problem message of this lint}',",
			"    correctionMessage: '${2:The correction message of this lint}',",
			"    url: '\\$docUrl#${${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}.name}',"
			"    errorSeverity: ErrorSeverity.INFO,",
			"  );",
			"",
			"  @override",
			"  void run(",
			"    CustomLintResolver resolver,",
			"    ErrorReporter reporter,",
			"    CustomLintContext context,",
			"  ) {",
			"    if (!context.pubspec.isFlutterProject) return;",
			""
			"    context.registry.addClassDeclaration((node) {",
			"      ${3://TODO: implement the lint here}",
			"",
			"      reporter.reportErrorForNode(code, node);",
			"    });",
			"  }",
			"",
			"  @override",
			"  List<Fix> getFixes() => [];",
			"}",
			""
		],
	},
	"fix": {
		"scope": "dart",
		"prefix": "fix",
		"description": "Create a fix",
		"body": [
			"class _${1:TheNameOfThisFix} extends DartFix {",
			"  @override",
			"  void run(",
			"    CustomLintResolver resolver,",
			"    ChangeReporter reporter,",
			"    CustomLintContext context,",
			"    AnalysisError analysisError,",
			"    List<AnalysisError> others,",
			"  ) {",
			"    context.registry.addClassDeclaration((node) {",
			"      if (!analysisError.sourceRange.intersects(node.sourceRange)) return;",
			"",
			"      final changeBuilder = reporter.createChangeBuilder(",
			"        message: '${2:The message of this fix}',",
			"        priority: ${3:80},",
			"      );",
			"",
			"      changeBuilder.addDartFileEdit((builder) {",
			"        ${4:// TODO: implement the fix here}",
			"      });",
			"    });",
			"  }",
			"}",
			""
		],
	},
	"assist": {
		"scope": "dart",
		"prefix": "assist",
		"description": "Create an assist",
		"body": [
			"import 'package:analyzer/source/source_range.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends DartAssist {",
			"  @override",
			"  Future<void> run(",
			"    CustomLintResolver resolver,",
			"    ChangeReporter reporter,",
			"    CustomLintContext context,",
			"    SourceRange target,",
			"  ) async {",
			"    context.registry.addClassDeclaration((node) {",
			"      if (!node.sourceRange.covers(target)) return;",
			"",
			"      ${3:// TODO: implement the assist here}",
			"",
			"      final changeBuilder = reporter.createChangeBuilder(",
			"        message: '${1:The message for this assist}',",
			"        priority: ${2:80},",
			"      );",
			"",
			"      changeBuilder.addDartFileEdit((builder) {",
			"        ${4:// TODO: implement the refactor here}",
			"      });",
			"    });",
			"  }",
			"}",
			""
		],
	},
	"flutter assist": {
		"scope": "dart",
		"prefix": "fassist",
		"description": "Create a flutter assist",
		"body": [
			"import 'package:analyzer/source/source_range.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"",
			"import '../../utils/pubspec_extensions.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends DartAssist {",
			"  @override",
			"  Future<void> run(",
			"    CustomLintResolver resolver,",
			"    ChangeReporter reporter,",
			"    CustomLintContext context,",
			"    SourceRange target,",
			"  ) async {",
			"    if (!context.pubspec.isFlutterProject) return;",
			"",
			"    context.registry.addClassDeclaration((node) {",
			"      if (!node.sourceRange.covers(target)) return;",
			"",
			"      ${3:// TODO: implement the assist here}",
			"",
			"      final changeBuilder = reporter.createChangeBuilder(",
			"        message: '${1:The message for this assist}',",
			"        priority: ${2:80},",
			"      );",
			"",
			"      changeBuilder.addDartFileEdit((builder) {",
			"        ${4:// TODO: implement the refactor here}",
			"      });",
			"    });",
			"  }",
			"}",
			""
		],
	},
	"expect": {
		"scope": "dart",
		"prefix": "expect",
		"description": "Create a expect_lint",
		"body": [
			"// expect_lint: ${TM_FILENAME_BASE/(.*)_(.*)/$1/}"
		],
	},
	"limit":{
		"scope": "dart",
		"prefix": "limit",
		"description": "Limit the scope of a lint to the example file",
		"body": [
			"final fileName = resolver.source.shortName;",
			"if (fileName != '${TM_FILENAME_BASE}_example.dart') return;",
		],
	}
}
